#include "irc.h"
#include "irc_user.h"
#include "irc_channel.h"

CONFIG (StringList, irc_adminmasks, CoStringList())

// =============================================================================
// Determine status level of this user.
// -----------------------------------------------------------------------------
IRCChannel::Status IRCUser::chanStatus (IRCChannel* chan) {
	return chan->effectiveStatus (this);
}

// =============================================================================
// Check if this user is our administrator
// -----------------------------------------------------------------------------
void IRCUser::checkAdmin() {
	if (user().length() == 0 || host().length() == 0)
		return;
	
	str uhost = userhost();
	bool admin = false;
	
	for (int i = 0; i < irc_adminmasks.size() && !admin; i++)
		if (mask (uhost, irc_adminmasks[i]))
			admin = true;
	
	if (admin)
		*this |= Admin;
	else
		*this &= ~Admin;
}

// =============================================================================
// -----------------------------------------------------------------------------
str IRCUser::userhost() const {
	return fmt ("%1!%2@%3", nick(), user(), host());
}

// =============================================================================
// -----------------------------------------------------------------------------
IRCUser::Flags IRCUser::operator| (Flags f) const {
	return flags() | f;
}

// =============================================================================
// -----------------------------------------------------------------------------
IRCUser IRCUser::operator|= (Flags f) {
	setFlags (flags() | f);
	return *this;
}

// =============================================================================
// -----------------------------------------------------------------------------
IRCUser::Flags IRCUser::operator& (Flags f) const {
	return flags() & f;
}

// =============================================================================
// -----------------------------------------------------------------------------
IRCUser IRCUser::operator&= (Flags f) {
	setFlags (flags() & f);
	return *this;
}

// =============================================================================
// -----------------------------------------------------------------------------
IRCUser::Flags IRCUser::operator^ (Flags f) const {
	return flags() ^ f;
}

// =============================================================================
// -----------------------------------------------------------------------------
IRCUser IRCUser::operator^= (Flags f) {
	setFlags (flags() ^ f);
	return *this;
}

// =============================================================================
// -----------------------------------------------------------------------------
str IRCUser::asString() const {
	return fmt ("%1 (%2@%3)", nick(), user(), host());
}

// =============================================================================
// -----------------------------------------------------------------------------
void IRCUser::addKnownChannel (IRCChannel* chan) {
	m_channels << chan;
}

// =============================================================================
// -----------------------------------------------------------------------------
void IRCUser::delKnownChannel (IRCChannel* chan) {
	m_channels.remove (chan);
}

// =============================================================================
// -----------------------------------------------------------------------------
bool IRCUser::isAdmin() const {
	return flags() & Admin;
}